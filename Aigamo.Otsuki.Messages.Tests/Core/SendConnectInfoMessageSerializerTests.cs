using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Aigamo.Otsuki.Messages.Core;
using FluentAssertions;
using Xunit;

namespace Aigamo.Otsuki.Messages.Tests.Core
{
	public class SendConnectInfoMessageSerializerTests
	{
		private static IEnumerable<object?[]> TestData()
		{
			yield return new object?[]
			{
				new byte[]
				{
					0xC2, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x50, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x56, 0x01, 0x00, 0x00,
					0x1A, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x23, 0x81, 0xBE, 0x94, 0xAB, 0xA1, 0xFB, 0x48, 0xA2, 0xE7, 0x23, 0x85, 0x9E, 0x65, 0x89, 0x36,
					0xDA, 0x80, 0xEF, 0x61, 0x1B, 0x69, 0x47, 0x42, 0x9A, 0xDD, 0x1C, 0x7B, 0xED, 0x2B, 0xC1, 0x3E,
					0x20, 0x81, 0x8E, 0x94,
					0x03, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x21, 0x81, 0x9E, 0x94,
					0x00, 0x00, 0x00, 0x00,
					0x02, 0x01, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x07, 0x00, 0x00, 0x00,
					0x42, 0x01, 0x00, 0x00,
					0x14, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x20, 0x81, 0x8E, 0x94,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x01, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x08, 0x00, 0x00, 0x00,
					0x2E, 0x01, 0x00, 0x00,
					0x14, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0xCC, 0x00, 0x00, 0x00,
					0x62, 0x00, 0x00, 0x00,
					0x78, 0x2D, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x2F, 0x70, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3D, 0x25, 0x37, 0x42, 0x45, 0x42, 0x46, 0x45, 0x37, 0x42, 0x41, 0x30, 0x2D, 0x36, 0x32, 0x38, 0x44, 0x2D, 0x31, 0x31, 0x44, 0x32, 0x2D, 0x41, 0x45, 0x30, 0x46, 0x2D, 0x30, 0x30, 0x36, 0x30, 0x39, 0x37, 0x42, 0x30, 0x31, 0x34, 0x31, 0x31, 0x25, 0x37, 0x44, 0x3B, 0x68, 0x6F, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x36, 0x35, 0x2E, 0x35, 0x32, 0x2E, 0x32, 0x33, 0x39, 0x2E, 0x36, 0x31, 0x3B, 0x70, 0x6F, 0x72, 0x74, 0x3D, 0x32, 0x33, 0x30,
					0x32, 0x00, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00,
					0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00,
					0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00,
				},
				new SendConnectInfoMessage
				{
					Flags = SessionFlags.MigrateHost,
					MaxPlayers = 0,
					CurrentPlayers = 2,
					GuidInstance = new Guid("94be8123-a1ab-48fb-a2e7-23859e658936"),
					GuidApplication = new Guid("61ef80da-691b-4247-9add-1c7bed2bc13e"),
					Dpnid = new Dpnid(unchecked((int)0x948E8120)),
					Version = 0x03,
					NameTableEntries = new[]
					{
						new NameTableEntryInfo
						{
							Dpnid = new Dpnid(unchecked((int)0x949E8121)),
							DpnidOwner = Dpnid.Empty,
							Host = true,
							Peer = true,
							Version = 2,
							DnetVersion = DnetVersion.DirectX90,
							Url = string.Empty,
							Data = ImmutableArray<byte>.Empty,
							Name = "Test User",
						},
						new NameTableEntryInfo
						{
							Dpnid = new Dpnid(unchecked((int)0x948E8120)),
							DpnidOwner = Dpnid.Empty,
							Peer = true,
							Version = 3,
							DnetVersion = (DnetVersion)8,
							Url = new Address("65.52.239.61", 2302).Url,
							Data = ImmutableArray<byte>.Empty,
							Name = "Test User",
						},
					}.ToImmutableArray(),
					NameTableMemberships = ImmutableArray<NameTableMembershipInfo>.Empty,
					ApplicationReservedData = ImmutableArray<byte>.Empty,
					ReservedData = ImmutableArray<byte>.Empty,
					Password = string.Empty,
					SessionName = "Test Session",
					Reply = ImmutableArray<byte>.Empty,
				},
			};

			yield return new object?[]
			{
				new byte[]
				{
					0xC2, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x50, 0x00, 0x00, 0x00,
					0x40, 0x00, 0x00, 0x00,
					0x14, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x12, 0x77, 0xDB, 0x0F, 0x24, 0xB7, 0x08, 0x46, 0x85, 0x7E, 0x40, 0x2D, 0x08, 0x82, 0xC4, 0x22,
					0xC4, 0xE2, 0x4D, 0xEB, 0xB2, 0x79, 0x4A, 0x48, 0xA1, 0xA8, 0x7A, 0xA7, 0x5F, 0x55, 0x45, 0xD4,
					0x11, 0x77, 0xEB, 0x0F,
					0x03, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x10, 0x77, 0xFB, 0x0F,
					0x00, 0x00, 0x00, 0x00,
					0x02, 0x01, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x07, 0x00, 0x00, 0x00,
					0x3B, 0x01, 0x00, 0x00,
					0x12, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x11, 0x77, 0xEB, 0x0F,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x01, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x07, 0x00, 0x00, 0x00,
					0x29, 0x01, 0x00, 0x00,
					0x12, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0xCC, 0x00, 0x00, 0x00,
					0x5D, 0x00, 0x00, 0x00,
					0x78, 0x2D, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x2F, 0x70, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3D, 0x25, 0x37, 0x42, 0x45, 0x42, 0x46, 0x45, 0x37, 0x42, 0x41, 0x30, 0x2D, 0x36, 0x32, 0x38, 0x44, 0x2D, 0x31, 0x31, 0x44, 0x32, 0x2D, 0x41, 0x45, 0x30, 0x46, 0x2D, 0x30, 0x30, 0x36, 0x30, 0x39, 0x37, 0x42, 0x30, 0x31, 0x34, 0x31, 0x31, 0x25, 0x37, 0x44, 0x3B, 0x68, 0x6F, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x31, 0x2E, 0x32, 0x2E, 0x33, 0x2E, 0x34, 0x3B, 0x70, 0x6F, 0x72, 0x74, 0x3D, 0x32, 0x33, 0x30, 0x32, 0x00,
					0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00,
					0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x31, 0x00, 0x00, 0x00,
				},
				new SendConnectInfoMessage
				{
					Flags = SessionFlags.NoDpnServer,
					MaxPlayers = 20,
					CurrentPlayers = 2,
					GuidInstance = new Guid("0fdb7712-b724-4608-857e-402d0882c422"),
					GuidApplication = new Guid("eb4de2c4-79b2-484a-a1a8-7aa75f5545d4"),
					Dpnid = new Dpnid(0x0FEB7711),
					Version = 3,
					NameTableEntries = new[]
					{
						new NameTableEntryInfo
						{
							Dpnid = new Dpnid(0x0FFB7710),
							DpnidOwner = Dpnid.Empty,
							Host = true,
							Peer = true,
							Version = 2,
							DnetVersion = DnetVersion.DirectX90,
							Url = string.Empty,
							Data = ImmutableArray<byte>.Empty,
							Name = "Player 1",
						},
						new NameTableEntryInfo
						{
							Dpnid = new Dpnid(0x0FEB7711),
							DpnidOwner = Dpnid.Empty,
							Peer = true,
							Version = 3,
							DnetVersion = DnetVersion.DirectX90,
							Url = new Address("1.2.3.4", 2302).Url,
							Data = ImmutableArray<byte>.Empty,
							Name = "Player 2",
						},
					}.ToImmutableArray(),
					NameTableMemberships = ImmutableArray<NameTableMembershipInfo>.Empty,
					ApplicationReservedData = ImmutableArray<byte>.Empty,
					ReservedData = ImmutableArray<byte>.Empty,
					Password = string.Empty,
					SessionName = string.Empty,
					Reply = ImmutableArray<byte>.Empty,
				},
			};
		}

		[Theory]
		[MemberData(nameof(TestData))]
		internal void Deserialize(byte[] data, SendConnectInfoMessage expected)
		{
			var message = SendConnectInfoMessageSerializer.Default.Deserialize(data);
			message.PacketType.Should().Be(expected.PacketType);
			message.ReplySize.Should().Be(expected.ReplySize);
			message.Size.Should().Be(expected.Size);
			message.Flags.Should().Be(expected.Flags);
			message.MaxPlayers.Should().Be(expected.MaxPlayers);
			message.CurrentPlayers.Should().Be(expected.CurrentPlayers);
			message.SessionNameSize.Should().Be(expected.SessionNameSize);
			message.PasswordSize.Should().Be(expected.PasswordSize);
			message.ReservedDataSize.Should().Be(expected.ReservedDataSize);
			message.ApplicationReservedDataSize.Should().Be(expected.ApplicationReservedDataSize);
			message.GuidInstance.Should().Be(expected.GuidInstance);
			message.GuidApplication.Should().Be(expected.GuidApplication);
			message.Dpnid.Should().Be(expected.Dpnid);
			message.Version.Should().Be(expected.Version);
			message.VersionNotUsed.Should().Be(expected.VersionNotUsed);
			message.EntryCount.Should().Be(expected.EntryCount);
			message.MembershipCount.Should().Be(expected.MembershipCount);
			message.NameTableEntries.Should().Equal(expected.NameTableEntries);
			message.NameTableMemberships.Should().Equal(expected.NameTableMemberships);
			message.ApplicationReservedData.ToArray().Should().Equal(expected.ApplicationReservedData.ToArray());
			message.ReservedData.ToArray().Should().Equal(expected.ReservedData.ToArray());
			message.Password.Should().Be(expected.Password);
			message.SessionName.Should().Be(expected.SessionName);
			message.Reply.ToArray().Should().Equal(expected.Reply.ToArray());
		}

		[Theory]
		[MemberData(nameof(TestData))]
		internal void Serialize(byte[] expected, SendConnectInfoMessage message)
		{
			SendConnectInfoMessageSerializer.Default.Serialize(message).Should().Equal(expected);
		}
	}
}
